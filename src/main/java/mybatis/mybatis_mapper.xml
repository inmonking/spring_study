<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis.mybatis_mapper"><!-- mybatis_config.xml에 있음 -->


<!-- 상희 시작 -->

<!-- id:BoardDBBeanMybatis에 메소드명 /parameterType: #{boardid}의 타입 / resultType: select가 받는 타입 (*는 전체이기 때문에 mybatis_config.xml에 있는 alias="Board"(model.BoardDataBean)를 가져온다.) -->
	<!-- 총 게시글 카운트 -->
<!-- 	<select id="getArticleCount" parameterType="string"
		resultType="int">
		select coalesce(count(*),0) from board where boardid =
		#{boardid}
	</select> -->
	
	
	<select id="sh_ReadCount" resultType="int">
	select coalesce(count(*),0) from team_qna
	</select>
	

	<!-- 글 리스트 -->
<!-- 	<select id="getArticles" parameterType="hashmap"
		resultType="Board">
		select * from
		(select rownum rnum, a.*
		from (select num,
		writer, email, subject, passwd, reg_date,readcount, ref, re_step,
		re_level, content, ip, filename from board where boardid =
		#{boardid}  order by ref desc, re_step) a ) where rnum between #{start}
		and #{end}
	</select> -->


	<select id="QnAList" parameterType="hashmap" resultType="board">
		SELECT 
			num,
			cat_name,
			writer,
			subject,
			password,
			reg_date,
			readcount,
			ref,
			re_step,
			re_level,
			content
		FROM team_qna
		ORDER BY ref DESC,re_step
		limit #{start}
		offset #{end}
	</select>
	
	
	
	
	
	
	

	<!-- 글 내용 보기 -->
<!-- 	<select id="getArticle" parameterType="hashmap"
		resultType="Board">
		select * from board where num = #{num}
	</select> -->
	

	<select id="getQnA" parameterType="hashmap" resultType="Board">
	select * from team_QnA where num = #{num}
	</select>

	
	<!-- 새글 등록 글번호 카운트? -->
<!-- 	<select id="insertArticle_new" resultType="int">
		select coalesce(max(num),0) from
		board
	</select> -->
	
	<select id="insertQnA_new" resultType="int">
	select coalesce(max(num),0) from team_QnA	
	</select>
	
		

	<!-- 답글 등록 -->
<!-- 	<update id="insertArticle_update" parameterType="hashmap">
		update board set
		re_step=re_step+1 where ref= #{ref} and re_step> #{re_step}
	</update> -->
	
	
	<update id="insertQnA_update" parameterType="hashmap">
	update team_QnA set re_step=re_step+1 where ref= #{ref} and re_step #{re_step}
	</update>
	

	<!-- 새글 등록 -->
<!-- 	<insert id="insertArticle_insert" parameterType="Board">
		insert into
		board values
		(#{num},#{boardid}
		,#{writer},#{email},#{subject},#{passwd},now(),0,
		#{ref},#{re_step},#{re_level},#{content},#{ip}, #{filename},
		#{filesize})
	</insert> -->
	
	
	<insert id="insertQnA_insert" parameterType="Board">
	insert into team_QnA(
		cat_name
		,writer
		,subject
		,password
		,reg_date
		,readcount
		,ref
		,re_step
		,re_level
		,content
		)
	 values(
	 	 #{cat_name}, #{writer}, #{subject}, #{password}, now(), 0, #{ref}, #{re_step}, #{re_level}, #{content})
	</insert>
	
	
	
	<!-- 글 삭제, 수정시 비밀번호 검사 -->
<!-- 	<select id="update_passwd" parameterType="hashmap"
		resultType="string">
		select passwd from board where num =#{num}
	</select> -->
	
	
	<select id="update_passwrod" parameterType="hashmap"
		resultType="string">
		select password from team_QnA where num =#{num}
		</select>
	
	
	
	
	

	<!-- 글내용 볼때 조회수 카운트 됨 -->
<!-- 	<update id="update_readcount" parameterType="hashmap">
		update board set
		readcount=readcount+1 where num = #{num}
	</update> -->
	
	<update id="QnAupdate_readcount" parameterType="hashmap">
	update team_QnA set
		readcount=readcount+1 where num = #{num}
	</update>


	<!-- 글 수정 -->
<!-- 	<update id="update_update" parameterType="hashmap">
		update board set
		writer=#{writer},
		email=#{email},
		subject=#{subject},
		passwd=#{passwd},
		content=#{content}
		where num=#{num}
	</update> -->
	
	
 	<update id="QnAup_update" parameterType="hashmap">
 	update team_QnA set
 	subject=#{subject},
 	content=#{content}
 	where num = #{num}
 	</update>
	


	<!-- 글삭제 -->
<!-- 	<select id="delete" parameterType="hashmap">
		delete from board where num =
		#{num}
	</select> -->
	
	<select id="QnAdelete" parameterType="hashmap">
	delete From team_QnA where num= #{num}
	</select> 
	
	
	
	
<!-- id:TeamMemberDBBeanMybatis에 메소드명 /parameterType: #{password}의 (오라클테이블)타입 / resultType: select가 받는 타입 (*는 전체이기 때문에 mybatis_config.xml에 있는 alias="Board"(model.BoardDataBean)를 가져온다.) -->
	<!-- 로그인 -->
	<select id="login_idCheck" parameterType="String" resultType="String">
		select id from team_member where id=#{id}
	</select>
	
	<select id="login_pwCheck" parameterType="hashmap" resultType="String">
		select password from team_member where id=#{id} and password=#{password}
	</select>

		
	<!-- 회원가입 -->
	<insert id="sh_insert" parameterType="Member">
	insert into team_member values (#{id}, #{password}, #{gender}, #{name}, #{email}, #{phone})
	</insert>
		
	
	<!-- 회원정보 페이지 -->
	<select id="memPage" parameterType="hashmap" resultType="Member">
	select * from team_member where id = #{id}
	</select>

	
	<!-- 회원정보 수정 --> 	
 	<update id="up_memPage" parameterType="hashmap">
 	update team_member set
 	password = #{password},
 	email = #{email},
 	phone= #{phone}
 	where id = #{id}
 	</update>
 	

	<!-- 회원 탈퇴 -->
	<select id="memdelete" parameterType="hashmap">
	delete from team_member where in=#{id}
	</select>
	
	
	<!-- 비밀번호 검사 -->
	<select id="memCheckPasswd" parameterType="hashmap"
		resultType="string">
		select password from team_member where id =#{id}
		</select>
	
	
	
	
	
	
	<!-- 상희 끝 -->
	
	 <select id="findTable" parameterType="String" resultType="int">
	      <!-- 
	      postgres
	      SELECT
	         count(*) AS CNT
	      FROM
	         information_schema.tables
	      WHERE
	         table_schema='public' 
	         AND table_name=#{table_name} -->
	      SELECT
	      	COUNT(*) AS CNT
	      FROM 
	      	TABS
	      WHERE TABLE_NAME = upper(#{table_name})
	   </select>
	   
	   <select id="createQuery" parameterType="map">
	      ${create_query}
	   </select>
</mapper>